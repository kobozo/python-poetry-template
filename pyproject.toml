[project]
name = "project-name"
description = ""
readme = "README.md"
authors = [
    { "name" = "Yannick De Backer", "email" = "yannick@kobozo.eu" }
]
dynamic = ["version"]
requires-python = ">=3.13,<4"
dependencies = [
    "pydantic>=2.10.6",
    "pydantic-settings>=2.7.1"
]

[tool.poetry]
version = "1.0.2"
packages = [{include = "project_name", from = "src"}]

[tool.poetry.requires-plugins]
poetry-plugin-export = ">=1.8"


[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
mypy = "^1.15.0"
pre-commit = "^4.1.0"


[tool.poetry.group.linters]
optional = true


[tool.poetry.group.linters.dependencies]
ruff = "^0.9.9"


[tool.poetry.group.tests]
optional = true


[tool.poetry.group.tests.dependencies]
pytest = "^8.3.5"
pytest-cov = "^6.0.0"
tox = "^4.24.1"
tox-gh-actions = "^3.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = """
--doctest-modules \
--cov=./ \
--cov-append \
--cov-report html:tests/reports/coverage-html \
--cov-report xml:tests/reports/coverage.xml \
--ignore=docs/ \
--cov=project_name \
--cov-report=term-missing \
--cov-fail-under=90
"""
testpaths = [
    "tests",
]
pythonpath = "src"

[tool.ruff]
lint.select = [
    "A",    # Builtins
    "ANN",  # Annotations
    "ARG",  # Unused arguments
    "B",    # Bugbear
    "BLE",  # Blind except
    "C4",   # Comprehensions
    "C90",  # mccabe
    "COM",  # Commas
    "D1",   # Undocumented public elements
    "D2",   # Docstring conventions
    "D3",   # Triple double quotes
    "D4",   # Docstring text format
    "DTZ",  # Datetimes
    "EM",   # Error messages
    "ERA",  # Commented-out code
    "EXE",  # Executable
    "F",    # Pyflakes
    "FA",   # __future__ annotations
    "FLY",  # F-strings
    # "FURB", # Refurb
    "G",    # Logging format
    "I",    # Isort
    "ICN",  # Import conventions
    "INP",  # Disallow PEP-420 (Implicit namespace packages)
    "INT",  # gettext
    "ISC",  # Implicit str concat
    # "LOG",  # Logging
    "N",    # PEP-8 Naming
    "NPY",  # Numpy
    "PERF", # Unnecessary performance costs
    "PGH",  # Pygrep hooks
    "PIE",  # Unnecessary code
    "PL",   # Pylint
    "PT",   # Pytest
    "PTH",  # Use Pathlib
    "PYI",  # Stub files
    "Q",    # Quotes
    "RET",  # Return
    "RUF",  # Ruff
    "RSE",  # Raise
    "S",    # Bandit
    "SIM",  # Code simplification
    "SLF",  # Private member access
    "SLOT", # __slots__
    "T10",  # Debugger
    "T20",  # Print
    "TCH",  # Type checking
    "TID",  # Tidy imports
    "TRY",  # Exception handling
    "UP",   # Pyupgrade
    "W",    # Warnings
    "YTT",  # sys.version
]
lint.ignore = [
    "D203",    # One blank line before class docstring
    "D212",    # Multi-line summary first line
    "PLR0913", # Too many arguments
    "Q000",    # Single quotes found but double quotes preferred
]
line-length = 120
# preview = true
show-fixes = true
src = ["src",]
target-version = "py39"


[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
multiline-quotes = "double"


[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10


[tool.ruff.lint.per-file-ignores]
# https://beta.ruff.rs/docs/rules/
"__init__.py" = ["F401","F403","F405",]
"tests/*" = ["ANN", "ARG", "INP001", "S101",]


[tool.ruff.lint.pylint]
max-args = 15
max-branches = 20
max-returns = 10
max-statements = 80


[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"


[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py313, pypy3
skip_missing_interpreters = true

[gh-actions]
python =
    3.13: py313

[testenv]
passenv = GITHUB_*
allowlist_externals = poetry

commands =
    poetry run pytest
    poetry run coverage report
"""

[tool.coverage.report]
exclude_lines = [
    "pragma: not covered",
    "@overload",
]
omit = ["init-project.py"]

[tool.coverage.run]
branch = true
relative_files = true
omit = [
    ".tox/*",
    "tests/*",
]
